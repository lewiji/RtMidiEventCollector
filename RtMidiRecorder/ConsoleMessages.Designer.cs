//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RtMidiRecorder {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ConsoleMessages {
        
        private static System.Resources.ResourceManager resourceMan;
        
        private static System.Globalization.CultureInfo resourceCulture;
        
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ConsoleMessages() {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static System.Resources.ResourceManager ResourceManager {
            get {
                if (object.Equals(null, resourceMan)) {
                    System.Resources.ResourceManager temp = new System.Resources.ResourceManager("RtMidiRecorder.ConsoleMessages", typeof(ConsoleMessages).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        internal static string DevicePort_Invalid_null {
            get {
                return ResourceManager.GetString("DevicePort_Invalid_null", resourceCulture);
            }
        }
        
        internal static string DevicePort_Conversion_Failed {
            get {
                return ResourceManager.GetString("DevicePort_Conversion_Failed", resourceCulture);
            }
        }
        
        internal static string Heading_Midi_DeviceList {
            get {
                return ResourceManager.GetString("Heading_Midi_DeviceList", resourceCulture);
            }
        }
        
        internal static string Prompt_DevicePort_Entry {
            get {
                return ResourceManager.GetString("Prompt_DevicePort_Entry", resourceCulture);
            }
        }
        
        internal static string Task_canceled_shutting_down {
            get {
                return ResourceManager.GetString("Task_canceled_shutting_down", resourceCulture);
            }
        }
        
        internal static string Exiting_with_return_code {
            get {
                return ResourceManager.GetString("Exiting_with_return_code", resourceCulture);
            }
        }
        
        internal static string Starting_MIDI_device_worker {
            get {
                return ResourceManager.GetString("Starting_MIDI_device_worker", resourceCulture);
            }
        }
        
        internal static string Connected_to_Midi_Input_ {
            get {
                return ResourceManager.GetString("Connected_to_Midi_Input_", resourceCulture);
            }
        }
        
        internal static string Started_idle_timer_ {
            get {
                return ResourceManager.GetString("Started_idle_timer_", resourceCulture);
            }
        }
        
        internal static string Collected__n__events_ {
            get {
                return ResourceManager.GetString("Collected__n__events_", resourceCulture);
            }
        }
        
        internal static string MIDI_events_detected {
            get {
                return ResourceManager.GetString("MIDI_events_detected", resourceCulture);
            }
        }
        
        internal static string Exception_initiating_MIDI_device {
            get {
                return ResourceManager.GetString("Exception_initiating_MIDI_device", resourceCulture);
            }
        }
        
        internal static string Saving_midi_to_path {
            get {
                return ResourceManager.GetString("Saving_midi_to_path", resourceCulture);
            }
        }
        
        internal static string Saved_midi_ {
            get {
                return ResourceManager.GetString("Saved_midi_", resourceCulture);
            }
        }
        
        internal static string Error_while_serializing_midi_events_ {
            get {
                return ResourceManager.GetString("Error_while_serializing_midi_events_", resourceCulture);
            }
        }
        
        internal static string Rtmidi_native_library_not_found {
            get {
                return ResourceManager.GetString("Rtmidi_native_library_not_found", resourceCulture);
            }
        }
        
        internal static string Option_Device_port_for_MIDI_input_ {
            get {
                return ResourceManager.GetString("Option_Device_port_for_MIDI_input_", resourceCulture);
            }
        }
        
        internal static string Option_Idle_timeout {
            get {
                return ResourceManager.GetString("Option_Idle_timeout", resourceCulture);
            }
        }
        
        internal static string Option_Channel_Override {
            get {
                return ResourceManager.GetString("Option_Channel_Override", resourceCulture);
            }
        }
        
        internal static string Option_Drum_mode {
            get {
                return ResourceManager.GetString("Option_Drum_mode", resourceCulture);
            }
        }
        
        internal static string FilePathOption_Path_to_output {
            get {
                return ResourceManager.GetString("FilePathOption_Path_to_output", resourceCulture);
            }
        }
    }
}
